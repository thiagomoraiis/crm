 # cart, created = Cart.objects.get_or_create(
        #     cart_owner=self.request.user, status='open',
        # )
        # item_cart, created = CartItem.objects.get_or_create(
        #     product_item=product, cart=cart,
        #     quantity=quantity, defaults={'total_cart_item': 0}
        # )

# class ProductDetailView(View):
#     def get_product(self, request, slug):
#         product = get_object_or_404(
#             Product, slug=slug
#         )
#         return product
#
#     @method_decorator(login_required, name='post')
#     def dispatch(self, request, *args, **kwargs):
#         return super().dispatch(request, *args, **kwargs)
#
#     def get(self, request, slug):
#         product = self.get_product()
#         context = {'product': product}
#         return render(request, 'core/pages/product.html', context)
#
#     def post(self, request, slug):
#         product = self.get_product()
#         quantity = int(self.request.POST.get('quantity', 0))
#         cart, created = Cart.objects.get_or_create(
#             cart_owner=self.request.user, status='open',
#         )
#         item_cart, created = CartItem.objects.get_or_create(
#             product_item=product, cart=cart,
#             quantity=quantity, defaults={'total_cart_item': 0}
#         )
#
#         product.stock -= quantity
#
#         product.save()
#         item_cart.save()
#         return render(request, 'core/pages/product.html',
#           {'product': product})

# class ProductDetailView(DetailView):
#     template_name = 'core/pages/product.html'
#     model = Product
#     context_object_name = 'product'
#     slug_field = 'slug'
#     slug_url_kwarg = 'slug'

class ProductDetailView(View):
    def get_product(self, request, slug):
        product = get_object_or_404(
            Product, slug=slug
        )
        return product

    @method_decorator(login_required, name='post')
    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def get(self, request, slug):
        product = self.get_product(request, slug)
        context = {'product': product}
        return render(request, 'core/pages/product.html', context)

    def post(self, request, slug):
        product = self.get_product(request, slug)
        quantity = int(self.request.POST.get('quantity', ''))
        cart, created = Cart.objects.get_or_create(
            cart_owner=self.request.user
        )
        item_cart, created = CartItem.objects.get_or_create(
            product_item=product, cart=cart,
            quantity=quantity
        )

        product.stock -= quantity
        product.save()
        item_cart.quantity += quantity
        item_cart.save()
        return render(request, 'core/pages/product.html', {'product': product})

def post(self, request, slug):
        product = self.get_product(request, slug)
        quantity = int(self.request.POST.get('quantity', ''))
        cart, created = Cart.objects.get_or_create(
            cart_owner=self.request.user
        )

        item_cart = CartItem.objects.filter(
            product_item=product, cart=cart,
            quantity=quantity
        ).first()

        if item_cart:
            item_cart.quantity += quantity
            item_cart.save()
        else:
            item_cart = CartItem.objects.create(
                product_item=product, cart=cart,
                quantity=quantity
            )

        product.stock -= quantity
        product.save()
        return render(request, 'core/pages/product.html', {'product': product})

class DashboardTemplateView(UserPassesTestMixin, ListView):
    template_name = 'core/pages/dashboard.html'
    queryset = Invoicing.objects.values('total_value')
    context_object_name = 'total'

    def get_queryset(self):
        qs = super().get_queryset()
        return qs.first()['total_value']

    def test_func(self):
        return self.request.user.is_staff




class CartView(View):
    def get_products(self, request):
        if self.request.user.is_authenticated:
            try:
                cart = Cart.objects.filter(
                    cart_owner=self.request.user
                ).first()
                products = CartItem.objects.filter(
                    cart=cart
                )
                return products

            except ObjectDoesNotExist:
                return CartItem.objects.none()

    def get(self, request):
        product_cart = self.get_products(request)
        if product_cart:
            total_price_cart = product_cart.aggregate(
                total_price_sum=Sum('total_price_item')
            )['total_price_sum']

            return render(
                request, 'cart/pages/cart.html',
                {'products': product_cart,
                 'quantity': product_cart.count(),
                 'total_price_cart': round(total_price_cart, 2),
                 }
            )
        else:
            return render(
                request, 'cart/pages/cart.html',
                {'product_cart': product_cart}
            )

    def post(self, request):
        product_cart = self.get_products(request)
        total_price_cart = product_cart.aggregate(
            total_price_sum=Sum('total_price_item')
        )['total_price_sum']

        transactions = Transactions.objects.create( # noqa
            value=total_price_cart, client=self.request.user
        )
        invoicing = Invoicing.objects.filter().first()
        if invoicing:
            invoicing.total_value += transactions.value
            invoicing.save()
        else:
            value_invoicing = transactions.value
            invoicing = Invoicing.objects.create(total_value=value_invoicing)

        historic, created = PurchaseHistoric.objects.get_or_create(
            owner=self.request.user
        )
        for cart_item in product_cart:
            historic_item = HistoricItem.objects.create( # noqa
                historic=historic, product=cart_item.product_item
            )
        product_cart.delete()

        return render(
            request, 'cart/pages/cart.html',
            {'products': product_cart,
             'quantity': product_cart.count(),
             # 'total_price_cart': round(total_price_cart, 2),
             }
        )

    def post(self, request):
        product_cart = self.get_products(request)
        total_price_cart = product_cart.aggregate(
            total_price_sum=Sum('total_price_item')
        )['total_price_sum']

        self.create_or_update_invoicing(total_price_cart)
        self.create_historic_item(product_cart)
        self.update_stock_quantity(product_cart)
        product_cart.delete()

        return render(
            request, 'cart/pages/cart.html',
            {'products': product_cart,
             'quantity': product_cart.count()
             }
        )

    def create_historic_item(self, product_cart):
        historic, created = PurchaseHistoric.objects.get_or_create(
            owner=self.request.user
        )
        for cart_item in product_cart:
            historic_item = HistoricItem.objects.create( # noqa
                historic=historic, product=cart_item.product_item
            )

    def create_or_update_invoicing(self, total_price_cart):
        transactions = self.create_transaction(total_price_cart)
        invoicing = Invoicing.objects.filter().first()

        if invoicing:
            invoicing.total_value += transactions.value
            invoicing.save()
        else:
            value_invoicing = transactions.value
            invoicing = Invoicing.objects.create(total_value=value_invoicing)

    def create_transaction(self, total_price_cart):
        transactions = Transactions.objects.create( # noqa
            value=total_price_cart, client=self.request.user
        )
        return transactions

    def update_stock_quantity(self, product_cart):
        product = product_cart.product_item.product
        inventory = Inventory.objects.filter(product=product).values('quantity')





class ProductDetailView(View):
    def get_product(self, request, slug):
        product = get_object_or_404(
            Product, slug=slug
        )
        return product

    @method_decorator(login_required, name='post')
    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def get(self, request, slug):
        product = self.get_product(request, slug)
        context = {'product': product}
        return render(request, 'product/pages/product.html', context)

    def post(self, request, slug):
        product = self.get_product(request, slug)
        quantity = int(self.request.POST.get('quantity', ''))
        cart, created = Cart.objects.get_or_create(
            cart_owner=self.request.user
        )

        item_cart = CartItem.objects.filter(
            product_item=product, cart=cart
        ).first()

        if item_cart:
            item_cart.quantity += quantity
            item_cart.total_price_item = \
                item_cart.quantity * item_cart.product_item.price
            item_cart.save()
        else:
            item_cart = CartItem.objects.create(
                product_item=product, cart=cart,
                quantity=quantity
            )

        # if product.stock >= quantity:
        #     product.stock -= quantity
        #     product.save()
        # else:
        #     raise ValidationError(
        #         messages.error(self.request, 'Stock Insuficiente')
        #     )

        return render(
            request, 'product/pages/product.html',
            {'product': product}
        )
