def post(self, request):
    product_cart = self.get_products(request)
    total_price_cart = product_cart.aggregate(
        total_price_sum=Sum('total_price_item')
    )['total_price_sum']

    self.create_or_update_invoicing(request)
    self.create_historic_item(request, product_cart)
    product_cart.delete()

    return render(
        request, 'cart/pages/cart.html',
        {'products': product_cart,
            'quantity': product_cart.count(),
            }
    )

def create_historic_item(self, request, product_cart):
    historic, created = PurchaseHistoric.objects.get_or_create(
        owner=self.request.user
    )
    for cart_item in product_cart:
        historic_item = HistoricItem.objects.create( # noqa
            historic=historic, product=cart_item.product_item
        )

def create_or_update_invoicing(self, request):
    transactions = self.create_transaction()
    invoicing = Invoicing.objects.filter().first()

    if invoicing:
        invoicing.total_value += transactions.value
        invoicing.save()
    else:
        value_invoicing = transactions.value
        invoicing = Invoicing.objects.create(total_value=value_invoicing)


def create_transaction(self):
    transactions = Transactions.objects.create( # noqa
        value=total_price_cart, client=self.request.user
    )
    return transactions


# Product Refact

    def post(self, request, slug):
        product = self.get_product(request, slug)
        quantity = int(self.request.POST.get('quantity', ''))
        cart, created = Cart.objects.get_or_create(
            cart_owner=self.request.user
        )

        self.update_or_create_item_product(cart, product)

        return render(
            request, 'product/pages/product.html',
            {'product': product}
        )

    def update_or_create_item_product(self, cart, product):
        item_cart = CartItem.objects.filter(
            product_item=product, cart=cart
        ).first()

        if item_cart:
            item_cart.quantity += quantity
            item_cart.total_price_item = \
                item_cart.quantity * item_cart.product_item.price
            item_cart.save()
        else:
            item_cart = CartItem.objects.create(
                product_item=product, cart=cart,
                quantity=quantity
            )

